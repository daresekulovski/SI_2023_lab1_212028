4.git init беше употребена како команда за иницијализација на Git во ново 
креираниот директориум што ке служи како репозиториум за лабараториската 
вежба.
5.git remote add origin https://github.com/daresekulovski/SI_2023_lab1_212028.git е 
наредната команда која беше употребена и служи за линкување на локално креираниот 
репозиториум со одалечениот репозиториум.
6.Најпрвин беше креирана README.md со командата nano.Потоа беа употребени командите 
git add README.md за да биде поставена дадотеката во stagging фазата и командата git 
commit -m "Inital commit" за додавање на коментар и конечно извршување на commit.
7.Исто како и во чекор 6 најпрвин дадотеката SILab1.java беше креирана со командата 
nano.Потоа со командата git add SILab1.java беше поставена дадотеката во stagging 
фазата.И со командата git commit -m "Add java class" беше додаено коментар и конечно 
комитната дадотеката кон репозиториумот.  
8.За синхронизација на локалниот репозиториум со оделчениот репозиториум беше 
употребена командата git push -u origin master.
9.За креирање на трите нови гранки беа употребени командите git branch bug1, git 
branch bug2 и git branch bug3 соодветно.
10.За префрлање на гранката bug1 се употреби командата git checkout bug1
11.По поправање на грешката со nano, беше употребена командата git add SILab1.java за 
да биде поставена дадотеката во stagging фаза, а потоа употребена командата git 
commit -m "Fix wrong loop for reading" за конечен commit.
12.Повторно со помош на командата git checkout bug2 се префрламе на bug2 гранката.
13.Како и во чекор 11 со nano беа направени корекциите, по што се употреби командата 
git add SILab1.java и на крај git commit -m "Fix wrong condition in filterOddNumbers"
14.Како и во чекорите 10 и 12 се употреби командата git checkout bug3 за работа со 
гранката bug3.
15.Пак правиме корекција мна дадотеката со командата nano, по што се става во 
stagging фаза со командата git add SILab1.java и git commit -m "Fix method 
sumEvenNumbers".
16.За синхронизација на сите гранки најпрвин се употреби командата git checkout за 
пристапиме на соодветната гранка и потоа командата git push -u origin <името на 
гранката која ја синхронизираме>.Така соодветно за сите.
17.За враќање кон главната гранка повторно користиме git checkout master.
18.За спојување на гранките bug1 кон master се употреби кoмандата git merge bug1.При 
извршување на командата немаше никакви конфликти и спојувањето беше извршено со fast 
forward.
19.Пак како во чекорот 16 со помош на командите git checkout и git push -u 
origin <име на гранка>.
20.Повторно се користи командата git merge bug2 за приспојување на гранката bug2 кон 
главнта гранка master.Конфликти нема при спојувањето и како начин за спојување се 
употребува ort односно recursive спојување каде што се креира уште еден commit.
21.Ги синхронизираме пак сите гранки со командите git checkout за пренасочување кон 
гранката што ќе ја синхронизираме и командата git push -u origin <име на гранката>.
22.Се префрламе на гранка bug3 со командата git checkout bug3.
23.За овој чекор се користи командата git rebase master за да се придобијат 
commits-от кои ги имаме на гранката master, а не на bug3 се со цел кога ќе ја 
приспојуваме гранката bug3 кон master да не добиеме уште еден commit преку recursive 
начинот на спојување туку со fast forward.
24.Се префрламе на гранката master со командата git checkout master.
25.Гранката bug3 ја спојуваме со master со командата git merge bug3.Нема конфликти 
при спојувањето и се извршува на fast forward начин.
26.Ги синхронизираме гранките со помош на командата git checkout <име гранка> за да 
пристапиме до нив и потоа командата git push -u origin <име гранка>.Со исклучок bug3 
поради error-от кој го враќаше па беше употребена командата git push --force -u 
origin bug3.
